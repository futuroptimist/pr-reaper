name: Close my open PRs

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "dry_run: when true, list what would be closed (no changes)"
        type: boolean
        default: true
      author:
        description: "GitHub username for author: qualifier (blank → uses github.actor)"
        type: string
        default: ""
      org:
        description: "Limit to an org (optional, e.g. democratizedspace)"
        type: string
        default: ""
      title_filter:
        description: "Substring to match in PR title (optional, e.g. Codex)"
        type: string
        default: ""
      delete_branch:
        description: "Delete the PR source branch after closing"
        type: boolean
        default: false
      limit:
        description: "Max PRs to process (1–1000)"
        type: number
        default: 1000
      comment:
        description: "Closing comment"
        type: string
        default: "Closing as superseded by a newer Codex run."

permissions:
  contents: read
  pull-requests: write

jobs:
  reap:
    runs-on: ubuntu-latest
    # Prefer a user PAT if provided. If PR_REAPER_TOKEN is not set, gh will likely use GITHUB_TOKEN (repo-scoped) or be unauthenticated.
    env:
      GH_TOKEN: ${{ secrets.PR_REAPER_TOKEN }}
    steps:
      - name: Install gh + jq
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: Show auth identity
        run: |
          echo "gh version:"
          gh --version | head -n1 || true
          echo "gh auth status:"
          gh auth status || true
          echo "gh api user (login):"
          LOGIN=$(gh api user --jq .login 2>/dev/null || true)
          echo "${LOGIN:-"(none)"}"
          if [ -z "${GH_TOKEN:-}" ]; then
            echo "::error::GH_TOKEN is not set; add PR_REAPER_TOKEN with repo scope."
            exit 1
          fi
          if [ -z "$LOGIN" ]; then
            echo "::error::gh is unauthenticated; check PR_REAPER_TOKEN."
            exit 1
          fi
          SCOPES=$(gh api -i user 2>/dev/null | tr -d '\r' | sed -n 's/^x-oauth-scopes: //p')
          echo "token scopes: ${SCOPES:-"(none)"}"
          if ! grep -qw repo <<< "$SCOPES"; then
            echo "::error::PR_REAPER_TOKEN lacks repo scope; search will be empty."
            exit 1
          fi
          if ! grep -qw read:org <<< "$SCOPES"; then
            echo "::warning::PR_REAPER_TOKEN lacks read:org; org PRs may be skipped."
          fi

      - name: Build search query
        id: q
        run: |
          AUTHOR="${{ github.event.inputs.author }}"
          if [ -z "$AUTHOR" ]; then
            AUTHOR="${{ github.actor }}"
          fi
          Q="is:pr is:open author:${AUTHOR} archived:false"
          if [ -n "${{ github.event.inputs.org }}" ]; then
            Q="$Q org:${{ github.event.inputs.org }}"
          fi
          if [ -n "${{ github.event.inputs.title_filter }}" ]; then
            Q="$Q in:title ${{ github.event.inputs.title_filter }}"
          fi
          echo "Search query: $Q"
          echo "q=$Q" >> $GITHUB_OUTPUT

      - name: Search PRs
        id: search
        run: |
          gh search issues "${{ steps.q.outputs.q }}" \
            --limit ${{ github.event.inputs.limit }} \
            --json number,repository,title,url \
            | tee prs.json
          COUNT=$(jq 'length' prs.json)
          echo "Found $COUNT PR(s)"
          echo "count=$COUNT" >> $GITHUB_OUTPUT

      - name: Write summary
        run: |
          COUNT="${{ steps.search.outputs.count }}"
          {
            echo "## pr-reaper summary"
            echo ""
            if [ "$COUNT" = "0" ]; then
              echo "No open PRs found."
            else
              echo "Found **$COUNT** open PR(s):"
              echo ""
              jq -r '
                .[] |
                "- [\(.title)](\(.url))  (" +
                (.repository.url | sub("^https://github.com/"; "")) +
                "#\(.number))"
              ' prs.json
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Dry-run listing
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: |
          jq -r '.[] | "\(.url) — \(.title)"' prs.json

      - name: Close PRs
        if: ${{ github.event.inputs.dry_run != 'true' && steps.search.outputs.count != '0' }}
        run: |
          DELETE_FLAG=""
          if [ "${{ github.event.inputs.delete_branch }}" = "true" ]; then
            DELETE_FLAG="--delete-branch"
          fi
          COMMENT="${{ github.event.inputs.comment }}"
          jq -r '.[] | "\(.number)\t\(.repository.url)"' prs.json \
          | while IFS=$'\t' read -r NUM REPO_URL; do
              REPO="${REPO_URL#https://github.com/}"
              CMD=(gh pr close "$NUM" --repo "$REPO" --comment "$COMMENT")
              if [ -n "$DELETE_FLAG" ]; then
                CMD+=("$DELETE_FLAG")
              fi
              echo "${CMD[*]}"
              "${CMD[@]}"
            done
